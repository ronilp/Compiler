PREORDER TRAVERSAL

<program> <functions> e <main_function> TK_MAIN TK_LPAR TK_RPAR TK_NEWLINE <function_body> TK_LBRACE TK_NEWLINE <stmt> <type> TK_INT TK_ID,i,3 <squarebracket> e TK_NEWLINE <stmt> <type> TK_INT TK_ID,j,4 <squarebracket> e TK_NEWLINE <stmt> <IO> TK_READ TK_LPAR <L> TK_ID,i,5 <L1> e TK_RPAR TK_NEWLINE <stmt> <IO> TK_READ TK_LPAR <L> TK_ID,j,6 <L1> e TK_RPAR TK_NEWLINE <stmt> <type> TK_INT TK_ID,c,7 <squarebracket> e TK_NEWLINE <stmt> <type> TK_INT TK_ID,d,8 <squarebracket> e TK_NEWLINE <stmt> TK_ID,c,9 <X> TK_ASSIGNOP <stmt1> <Expr> <Expr2> <mulexp> <divexp> <mod> <cut> TK_ID,i,9 <ext> e <cut1> e <mod1> e <divexp1> e <mulexp1> TK_MULTIPLY <mulexp> <divexp> <mod> <cut> TK_ID,j,9 <ext> e <cut1> e <mod1> e <divexp1> e <Expr3> <AS> TK_PLUS <Expr> <Expr2> <mulexp> <divexp> <mod> <cut> TK_INTEGERLITERAL,3,9 <cut1> e <mod1> e <divexp1> e <mulexp1> e <Expr3> e TK_NEWLINE <stmt> TK_ID,d,10 <X> TK_ASSIGNOP <stmt1> <Expr> <Expr2> <mulexp> <divexp> <mod> <cut> TK_ID,i,10 <ext> e <cut1> e <mod1> e <divexp1> e <mulexp1> TK_MULTIPLY <mulexp> <divexp> <mod> <cut> TK_LPAR <Expr> <Expr2> <mulexp> <divexp> <mod> <cut> TK_ID,j,10 <ext> e <cut1> e <mod1> e <divexp1> e <mulexp1> e <Expr3> <AS> TK_PLUS <Expr> <Expr2> <mulexp> <divexp> <mod> <cut> TK_INTEGERLITERAL,3,10 <cut1> e <mod1> e <divexp1> e <mulexp1> e <Expr3> e TK_RPAR <cut1> e <mod1> e <divexp1> e <Expr3> e TK_NEWLINE <stmt> <IO> TK_WRITE TK_LPAR <L> "Precedence check : i*j+3 = " TK_RPAR TK_NEWLINE <stmt> <IO> TK_WRITE TK_LPAR <L> TK_ID,c,12 <L1> e TK_RPAR TK_NEWLINE <stmt> <IO> TK_WRITE TK_LPAR <L> " i*(j+3) = " TK_RPAR TK_NEWLINE <stmt> <IO> TK_WRITE TK_LPAR <L> TK_ID,d,14 <L1> e TK_RPAR TK_NEWLINE <stmt> e TK_RETURN <Expr1> e TK_NEWLINE TK_RBRACE 