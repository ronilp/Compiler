PREORDER TRAVERSAL OF AST

<program> e <main_function> TK_MAIN TK_LPAR TK_RPAR TK_NEWLINE <function_body> TK_LBRACE TK_NEWLINE <stmt> TK_INT TK_ID,i,3 e TK_NEWLINE <stmt> TK_INT TK_ID,j,4 e TK_NEWLINE <stmt> <IO> TK_READ TK_LPAR <L> TK_ID,i,5 e TK_RPAR TK_NEWLINE <stmt> <IO> TK_READ TK_LPAR <L> TK_ID,j,6 e TK_RPAR TK_NEWLINE <stmt> TK_INT TK_ID,c,7 e TK_NEWLINE <stmt> TK_INT TK_ID,d,8 e TK_NEWLINE <stmt> TK_ID,c,9 <X> TK_ASSIGNOP <Expr> <Expr2> <mulexp> <divexp> <mod> <cut> TK_ID,i,9 e e e e <mulexp1> TK_MULTIPLY <mulexp> <divexp> <mod> <cut> TK_ID,j,9 e e e e <Expr3> TK_PLUS <Expr> <Expr2> <mulexp> <divexp> <mod> TK_INTEGERLITERAL,3,9 e e e e e TK_NEWLINE <stmt> TK_ID,d,10 <X> TK_ASSIGNOP <Expr> <Expr2> <mulexp> <divexp> <mod> <cut> TK_ID,i,10 e e e e <mulexp1> TK_MULTIPLY <mulexp> <divexp> <mod> <cut> TK_LPAR <Expr> <Expr2> <mulexp> <divexp> <mod> <cut> TK_ID,j,10 e e e e e <Expr3> TK_PLUS <Expr> <Expr2> <mulexp> <divexp> <mod> TK_INTEGERLITERAL,3,10 e e e e e TK_RPAR e e e e TK_NEWLINE <stmt> <IO> TK_WRITE TK_LPAR "Precedence check : i*j+3 = " TK_RPAR TK_NEWLINE <stmt> <IO> TK_WRITE TK_LPAR <L> TK_ID,c,12 e TK_RPAR TK_NEWLINE <stmt> <IO> TK_WRITE TK_LPAR " i*(j+3) = " TK_RPAR TK_NEWLINE <stmt> <IO> TK_WRITE TK_LPAR <L> TK_ID,d,14 e TK_RPAR TK_NEWLINE e TK_RETURN e TK_NEWLINE TK_RBRACE 